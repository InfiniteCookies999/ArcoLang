import reflect.Any;
import win32;
import win32.EXCEPTION_POINTERS;
import win32.IMAGEHLP_SYMBOL64;

/*
 * This interface is required to be implemented for all
 * errors.
 */
Error interface {

    fn get_message() cstr;

}

IOError struct : Error {

    message String;

    IOError(message String)
        : message(*message.append_front("IOError: ")) {
    }

    IOError(fmt cstr, args Any...)
        : message(*format(fmt, args).append_front("IOError: ")) {
    }

    fn get_message() cstr {
        return message.buffer;
    }
}

ValueParseError struct : Error {

    message String;

    ValueParseError(message String)
        : message(*message.append_front("ValueParseError: ")) {
    }

    ValueParseError(fmt cstr, args Any...)
        : message(*format(fmt, args).append_front("ValueParseError: ")) {
    }

    fn get_message() cstr {
        return message.buffer;
    }
}

BadArgumentError struct : Error {

    FORCES_RAISE :: false;

    message String;

    BadArgumentError(message String)
        : message(*message.append_front("BadArgumentError: ")) {
    }

    BadArgumentError(fmt cstr, args Any...)
        : message(*format(fmt, args).append_front("BadArgumentError: ")) {
    }

    fn get_message() cstr {
        return message.buffer;
    }
}

OutOfBoundsError struct : Error {

    FORCES_RAISE :: false;

    message String;

    OutOfBoundsError(message String)
        : message(*message.append_front("OutOfBoundsError: ")) {
    }

    OutOfBoundsError(fmt cstr, args Any...)
        : message(*format(fmt, args).append_front("OutOfBoundsError: ")) {
    }

    fn get_message() cstr {
        return message.buffer;
    }
}

BadStateError struct : Error {

    FORCES_RAISE :: false;

    message String;

    BadStateError(message String)
        : message(*message.append_front("BadStateError: ")) {
    }

    BadStateError(fmt cstr, args Any...)
        : message(*format(fmt, args).append_front("BadStateError: ")) {
    }

    fn get_message() cstr {
        return message.buffer;
    }
}

UnreachableError struct : Error {

    FORCES_RAISE :: false;

    fn get_message() cstr {
        return "UnreachableError: unreachable code";
    }
}

MemoryAccessError struct : Error {
    fn get_message() cstr {
        return "MemoryAccessError: Cannot access memory";
    }
}

DivideByZeroErrror struct : Error {
    fn get_message() cstr {
        return "DivideByZeroErrror: Division by zero";
    }
}

private StackTrace struct {

}

private fn process_uncaught_error(err Error*) {
    eprintln(err.get_message());
    // TODO: Deal with complication of deleting throwing more errors!  delete err;
    exit(1); // TODO: Once multithreading is supported should do thread cleanup instead!
}

private ARCO_WIN32_EXCEPTION_CODE :: 0xABC643D1'u32;

private fn handle_uncaught_exception_handler(ptrs EXCEPTION_POINTERS*) int32 {
    // TODO: handle more exceptions!
    
    record := ptrs.ExceptionRecord;
    if record.ExceptionCode == ARCO_WIN32_EXCEPTION_CODE {
        // It is an exception from arco!
        err := cast(Error*) record.ExceptionInformation[0];
        process_uncaught_error(err);
    } else if record.ExceptionCode == win32.EXCEPTION_ACCESS_VIOLATION {
        err := MemoryAccessError{};
        process_uncaught_error(&err);
    } else if record.ExceptionCode == win32.EXCEPTION_INT_DIVIDE_BY_ZERO ||
              record.ExceptionCode == win32.EXCEPTION_FLT_DIVIDE_BY_ZERO {
        err := DivideByZeroErrror{};
        process_uncaught_error(&err);
    }

    return 0;
}

private fn raise_unwind_error(err Error*) {
    
    // TODO: come back to!   Getting the symbol information only works when there is debug
    //                       information. Would like to have support for the trace information
    //                       even if not in debug mode but that means knowing which addresses
    //                       are mapped to which functions, something not viable at the moment
    //                       unless we wrote our own linker.
    //
    /*println("Capturing backtrace");
    stack void*[62] = ---;
    trace_size int = cast(int) win32.RtlCaptureStackBackTrace(0, 62, stack, null);
    
    process := win32.GetCurrentProcess();
    win32.SymInitialize(process, null, 1);

    loop i : 0..<trace_size {
        address := stack[i];
        
        SYMBOL_ALLOC_SIZE :: sizeof(IMAGEHLP_SYMBOL64) + cast(int)win32.MAX_SYM_NAME + 1;
        
        symbol := cast(IMAGEHLP_SYMBOL64*) new char[SYMBOL_ALLOC_SIZE];
        symbol.MaxNameLength = win32.MAX_SYM_NAME;
        symbol.SizeOfStruct  = cast(uint32) sizeof(IMAGEHLP_SYMBOL64);

        displacement uint64;
        if win32.SymGetSymFromAddr64(process, cast(uint64) address, &displacement, symbol) {
            name cstr = symbol.Name;
            //c := *symbol.Name;
            println("name: %s", name);
        } else {
            println("failed to get symbol?");
        }
        delete symbol;
        //win32.SymFromAddr()
    }
    println("capture finished");*/

    payload uint64[1] = [
        cast(uint64) err
    ];
    
    // dwExceptionFlags=1     means it's noncontinuable.
    // nNumberOfArguments=1   how much data should be passed to the filters. We use this to pass our exception object.
    win32.RaiseException(ARCO_WIN32_EXCEPTION_CODE, dwExceptionFlags=1, nNumberOfArguments=1, lpArguments=payload);
}

private fn initialize_error_handling() {
    win32.SetUnhandledExceptionFilter(&handle_uncaught_exception_handler);
}

fn panic(err Error^) {
    raise_unwind_error(err);
}