
String struct {

	length int;
	buffer char*;

	fn ~String() {
		delete buffer;
	}

	/*
	 * Defaults to having zero length.
	 */
	fn String() {
		
	}

	/*
	 * Creates a string from a null terminated
	 * character buffer.
	 */
	fn String(buffer cstr) {
		this.length = strlen(buffer);
		this.buffer = new char[length + 1]; // +1 for null terminator.
		memcpy(this.buffer, buffer, length + 1);
	}

	/*
	 * Creates a String from a character buffer and
	 * an explicit length. Because of the explicity
	 * defined length the buffer does not have to be
	 * null terminated.
	 *
	 * If the buffer is null terminated
	 * do not include the null termination in the length.
	 *
	 * @Param copy_buffer if true it allocates new memory
	 *                    and copies the buffer over otherwise
	 *                    the buffer is assumed to be already
	 *                    allocated and null terminated.
	 */
	fn String(buffer char*, length int, copy_buffer bool = true) {
		if length < 0 {
			panic("String length length < 0");
		}
		
		this.length = length;
		if copy_buffer {
			this.buffer = new char[length + 1]; // +1 for null terminator.
			memcpy(this.buffer, buffer, length);
			this.buffer[length] = '\0';
		} else {
			this.buffer = buffer;
		}
	}

	fn empty() bool {
		return length == 0;
	}
}