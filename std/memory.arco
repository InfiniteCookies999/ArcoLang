
/*
 * Copies the count amount of bytes from the src
 * to the dest.
 *
 * Warning: This is not a safe function. Use with caution.
 */
native fn memcpy(dest void*, src const void*, count int) void;

/*
 * Sets n copies of the value c to the dest.
 *
 * Warning: This is not a safe function. Use with caution.
 */
native fn memset(dest void*, c int8, n int) void*;

/*
 * Compares two blocks of memory lhs and rhs.
 *
 * @count  the number of bytes to compare.
 * @return 0 if equal, >0 if (unsigned) byte in lhs is greater
           than (unsigned) byte in rhs, and <0 if the reverse.
 */
fn memcmp(lhs const void*, rhs const void*, count int) int {
    if count <= 0 {
        panic("count <= 0");
    }
    return cast(int) _memcmp(lhs, rhs, cast(ptrsize) count);
}
private native("memcmp") fn(cdecl) _memcmp(lhs const void*, rhs const void*, count ptrsize) int32;

/*
 * Compares two blocks of memory lhs and rhs.
 *
 * @return true if all the bytes in lhs equal the bytes in rhs
 *         for count bytes.
 */
fn memeq(lhs const void*, rhs const void*, count int) bool {
    return memcmp(lhs, rhs, count) == 0;
}

/*
 * Compares to c-strings which are null-terminated.
 *
 * @return 0 if equal, >0 if str1 is greater than str2 (in ascii),
 *         and <0 if the reserve.
 */
fn strcmp(str1 cstr, str2 cstr) int {
    return cast(int) _strcmp(str1, str2);
}

native("strcmp") fn(cdecl) _strcmp(str1 cstr, str2 cstr) int32;

/*
 * Compares to c-strings which are null-terminated.
 *
 * @return true if all characters in str1 match all characters in
 *         str2 until the null-terminator.
 */
fn streq(str1 cstr, str2 cstr) bool {
    return strcmp(str1, str2) == 0;
}

/*
 * Counts the number of characters until
 * it finds a null terminator in the c-string.
 *
 * @return  length of the null terminated
 *          c-string.
 */
fn strlen(s cstr) int {
    return cast(int) _strlen(s);
}
private native("strlen") fn(cdecl) _strlen(s cstr) ptrsize;

/*
 * Calculates the number of trailing zero bits in x. That is it
 * determines the amount of rightmost bits which are 0.
 *
 *  Ex.   110..10000
 *              ^^^^
 *              There are 4 trailing zeros.
 */
fn count_trailing_zeros(x uint32) int {
    if x == 0  return 32;
    n := 1;
    if (x & 0x0000FFFF) == 0 { n += 16; x >>= 16; }
    if (x & 0x000000FF) == 0 { n +=  8; x >>=  8; }
    if (x & 0x0000000F) == 0 { n +=  4; x >>=  4; }
    if (x & 0x00000003) == 0 { n +=  2; x >>=  2; }
    return n - cast(int)(x & 1);
}

/*
 * Calculates the number of trailing zero bits in x. That is it
 * determines the amount of rightmost bits which are 0.
 *
 *  Ex.   110..10000
 *              ^^^^
 *              There are 4 trailing zeros.
 */
fn count_trailing_zeros(x uint64) int {
    low := cast(uint32) x;
    if low == 0 {
        return 32 + count_trailing_zeros(cast(uint32) (x >> 32)); // deal with high bits.
    } else {
        return count_trailing_zeros(low); // deal with low bits.
    }
}

/*
 * Calculates the number of leading zero bits in x. That is it
 * determines the amount of leftmost bits which are 0.
 *
 * Ex.   00001..010
 *       ^^^^
 *       There are 4 leading zeros.
 */
fn count_leading_zeros(x uint32) int {
    if cast(int32)x <= 0   return (~x >> 26) & 32;
    n := 1;
    if x >> 16 == 0 { n += 16; x <<= 16; }
    if x >> 24 == 0 { n +=  8; x <<=  8; }
    if x >> 28 == 0 { n +=  4; x <<=  4; }
    if x >> 30 == 0 { n +=  2; x <<=  2; }
    return n - cast(int)(x >> 31);
}

/*
 * Calculates the number of leading zero bits in x. That is it
 * determines the amount of leftmost bits which are 0.
 *
 * Ex.   00001..010
 *       ^^^^
 *       There are 4 leading zeros.
 */
fn count_leading_zeros(x uint64) int {
    high := cast(uint32) (x >> 32);
    if high == 0 {
        return 32 + count_leading_zeros(cast(uint32) x);
    } else {
        return count_leading_zeros(high);
    }
}
