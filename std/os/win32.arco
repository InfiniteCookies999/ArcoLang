namespace win32;

// TODO: simplify syntax once macros are supported for native dllimport.

// ------------------------------------------------
// Win32: winnt.h

GENERIC_READ    :: 0x80000000'u32;
GENERIC_WRITE   :: 0x40000000'u32;
GENERIC_EXECUTE :: 0x20000000'u32;
GENERIC_ALL     :: 0x10000000'u32;

FILE_APPEND_DATA :: 0x0004'u32; 

FILE_SHARE_READ                      :: 0x00000001'u32;
FILE_SHARE_WRITE                     :: 0x00000002'u32;
FILE_SHARE_DELETE                    :: 0x00000004'u32;
FILE_ATTRIBUTE_READONLY              :: 0x00000001'u32;
FILE_ATTRIBUTE_HIDDEN                :: 0x00000002'u32;
FILE_ATTRIBUTE_SYSTEM                :: 0x00000004'u32;
FILE_ATTRIBUTE_DIRECTORY             :: 0x00000010'u32;
FILE_ATTRIBUTE_ARCHIVE               :: 0x00000020'u32;
FILE_ATTRIBUTE_DEVICE                :: 0x00000040'u32;
FILE_ATTRIBUTE_NORMAL                :: 0x00000080'u32;
FILE_ATTRIBUTE_TEMPORARY             :: 0x00000100'u32;
FILE_ATTRIBUTE_SPARSE_FILE           :: 0x00000200'u32;
FILE_ATTRIBUTE_REPARSE_POINT         :: 0x00000400'u32;
FILE_ATTRIBUTE_COMPRESSED            :: 0x00000800'u32;
FILE_ATTRIBUTE_OFFLINE               :: 0x00001000'u32;
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED   :: 0x00002000'u32;
FILE_ATTRIBUTE_ENCRYPTED             :: 0x00004000'u32;
FILE_ATTRIBUTE_INTEGRITY_STREAM      :: 0x00008000'u32;
FILE_ATTRIBUTE_VIRTUAL               :: 0x00010000'u32;
FILE_ATTRIBUTE_NO_SCRUB_DATA         :: 0x00020000'u32;
FILE_ATTRIBUTE_EA                    :: 0x00040000'u32;
FILE_ATTRIBUTE_PINNED                :: 0x00080000'u32;
FILE_ATTRIBUTE_UNPINNED              :: 0x00100000'u32;
FILE_ATTRIBUTE_RECALL_ON_OPEN        :: 0x00040000'u32;
FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS :: 0x00400000'u32;

// ------------------------------------------------
// Win32: processenv.h

STD_INPUT_HANDLE  :: -10'u32;
STD_OUTPUT_HANDLE :: -11'u32;
STD_ERROR_HANDLE  :: -12'u32;

native dllimport fn GetStdHandle(nStdHandle uint32) void*;

// ------------------------------------------------
// Win32: winbase.h

DEBUG_PROCESS                    :: 0x00000001'u32;
DEBUG_ONLY_THIS_PROCESS          :: 0x00000002'u32;
CREATE_SUSPENDED                 :: 0x00000004'u32;
DETACHED_PROCESS                 :: 0x00000008'u32;
CREATE_NEW_CONSOLE               :: 0x00000010'u32;
NORMAL_PRIORITY_CLASS            :: 0x00000020'u32;
IDLE_PRIORITY_CLASS              :: 0x00000040'u32;
HIGH_PRIORITY_CLASS              :: 0x00000080'u32;
REALTIME_PRIORITY_CLASS          :: 0x00000100'u32;
CREATE_NEW_PROCESS_GROUP         :: 0x00000200'u32;
CREATE_UNICODE_ENVIRONMENT       :: 0x00000400'u32;
CREATE_SEPARATE_WOW_VDM          :: 0x00000800'u32;
CREATE_SHARED_WOW_VDM            :: 0x00001000'u32;
CREATE_FORCEDOS                  :: 0x00002000'u32;
BELOW_NORMAL_PRIORITY_CLASS      :: 0x00004000'u32;
ABOVE_NORMAL_PRIORITY_CLASS      :: 0x00008000'u32;
INHERIT_PARENT_AFFINITY          :: 0x00010000'u32;
INHERIT_CALLER_PRIORITY          :: 0x00020000'u32;    // Deprecated
CREATE_PROTECTED_PROCESS         :: 0x00040000'u32;
EXTENDED_STARTUPINFO_PRESENT     :: 0x00080000'u32;
PROCESS_MODE_BACKGROUND_BEGIN    :: 0x00100000'u32;
PROCESS_MODE_BACKGROUND_END      :: 0x00200000'u32;
CREATE_SECURE_PROCESS            :: 0x00400000'u32;
CREATE_BREAKAWAY_FROM_JOB        :: 0x01000000'u32;
CREATE_PRESERVE_CODE_AUTHZ_LEVEL :: 0x02000000'u32;
CREATE_DEFAULT_ERROR_MODE        :: 0x04000000'u32;
CREATE_NO_WINDOW                 :: 0x08000000'u32;
PROFILE_USER                     :: 0x10000000'u32;
PROFILE_KERNEL                   :: 0x20000000'u32;
PROFILE_SERVER                   :: 0x40000000'u32;
CREATE_IGNORE_SYSTEM_DEFAULT     :: 0x80000000'u32;

INFINITE :: 0xFFFFFFFF'u32;

native dllimport fn CreateDirectoryA(lpPathName cstr, lpSecurityAttributes void*) int32;

native dllimport fn DeleteFileA(lpFileName cstr) int32;

native dllimport fn RemoveDirectoryA(lpPathName cstr) int32;

native dllimport fn GetCurrentDirectoryA(nBufferLength uint32, lpBuffer char*) int32;

native dllimport fn RtlCaptureStackBackTrace(FramesToSkip    uint32,
                                             FramesToCapture uint32,
                                             BackTrace       void*,
                                             BackTraceHash   uint32*) uint16;

// ------------------------------------------------
// Win32: dbghelp.h

MAX_SYM_NAME :: 2000'u32;

// TODO: c-alignment
IMAGEHLP_SYMBOL64 struct {
    SizeOfStruct  uint32;
    Address       uint64;
    Size          uint32;
    Flags         uint32;
    MaxNameLength uint32;
    Name          char[1];
};

native dllimport fn SymGetSymFromAddr64(hProcess        void*,
                                        qwAddr          uint64,
                                        pdwDisplacement uint64*,
                                        Symbol          IMAGEHLP_SYMBOL64*) bool;

native dllimport fn SymInitialize(hProcess void*, UserSearchPath cstr*, fInvadeProcess int32);

// ------------------------------------------------
// Win32: minwinbase.h

EXCEPTION_ACCESS_VIOLATION      :: 0xC0000005'u32;
EXCEPTION_DATATYPE_MISALIGNMENT :: 0x80000002'u32;
EXCEPTION_BREAKPOINT            :: 0x80000003'u32;
EXCEPTION_SINGLE_STEP           :: 0x80000004'u32;
STATUS_ARRAY_BOUNDS_EXCEEDED    :: 0xC000008C'u32;
EXCEPTION_FLT_DENORMAL_OPERAND  :: 0xC000008D'u32;
EXCEPTION_FLT_DIVIDE_BY_ZERO    :: 0xC000008E'u32;
EXCEPTION_FLT_INEXACT_RESULT    :: 0xC000008F'u32;
EXCEPTION_FLT_INVALID_OPERATION :: 0xC0000090'u32;
EXCEPTION_FLT_OVERFLOW          :: 0xC0000091'u32;
EXCEPTION_FLT_STACK_CHECK       :: 0xC0000092'u32;
EXCEPTION_FLT_UNDERFLOW         :: 0xC0000093'u32;
EXCEPTION_INT_DIVIDE_BY_ZERO    :: 0xC0000094'u32;
EXCEPTION_INT_OVERFLOW          :: 0xC0000095'u32;
EXCEPTION_PRIV_INSTRUCTION      :: 0xC0000096'u32;
EXCEPTION_IN_PAGE_ERROR         :: 0xC0000006'u32;
EXCEPTION_ILLEGAL_INSTRUCTION   :: 0xC000001D'u32;
// EXCEPTION_NONCONTINUABLE_EXCEPTION :: 
EXCEPTION_STACK_OVERFLOW        :: 0xC00000FD'u32;
EXCEPTION_INVALID_DISPOSITION   :: 0xC0000026'u32;
EXCEPTION_GUARD_PAGE            :: 0x80000001'u32;
EXCEPTION_INVALID_HANDLE        :: 0xC0000008'u32;
// EXCEPTION_POSSIBLE_DEADLOCK     :: missing from minwinbase.h?

// TODO: fix c-alignment nonsense.
EXCEPTION_RECORD struct {
    ExceptionCode        uint32;
    ExceptionFlags       uint32;
    ExceptionRecord      EXCEPTION_RECORD*; // because it forms a linked list.
    ExceptionAddress     void*;
    NumberParameters     uint32;
    ExceptionInformation uint64[15];
}

// TODO: Fix c-alignment nonsense
EXCEPTION_POINTERS struct {
    ExceptionRecord EXCEPTION_RECORD*;
    ContextRecord   void*;
}

native dllimport fn SetUnhandledExceptionFilter(lpTopLevelExceptionFilter fn(EXCEPTION_POINTERS*)int32) // ->
    fn(EXCEPTION_POINTERS*)int32;

native dllimport fn RaiseException(dwExceptionCode    uint32,
                                   dwExceptionFlags   uint32,
                                   nNumberOfArguments uint32,
                                   lpArguments        const uint64*);

// ------------------------------------------------
// Win32: fileapi.h

CREATE_NEW        :: 1'u32;
CREATE_ALWAYS     :: 2'u32;
OPEN_EXISTING     :: 3'u32;
OPEN_ALWAYS       :: 4'u32;
TRUNCATE_EXISTING :: 5'u32;

INVALID_FILE_SIZE        :: 0xFFFFFFFF'u32;
INVALID_SET_FILE_POINTER :: -1'u32;
INVALID_FILE_ATTRIBUTES  :: -1'u32;

native dllimport fn WriteFile(hFile                  void*,
                              lpBuffer               cstr,
                              nNumberOfBytesToWrite  uint32,
                              lpNumberOfBytesWritten uint32*,
                              lpOverlapped           void* // Ignored data structure.
                              ) int32;

native dllimport fn ReadFile(hFile               void*,
                            lpBuffer             void*,
                            nNumberOfBytesToRead uint32,
                            lpNumberOfBytesRead  uint32*,
                            lpOverlapped         void*  // Ignored data structure
                            ) int32;

native dllimport fn CreateFileA(lpFileName            cstr,
                                dwDesiredAccess       uint32,
                                dwShareMode           uint32,
                                lpSecurityAttributes  void*, // TODO: Support for security attributes?
                                dwCreationDisposition uint32,
                                dwFlagsAndAttributes  uint32,
                                hTemplateFile         void*
                                ) void*;

native dllimport fn GetFileAttributesA(lpFileName cstr) uint32;

native dllimport fn GetFileSize(hFile void*, lpFileSizeHigh ptrsize*) uint32;

native dllimport fn GetFileTime(hFile void*,
                                lpCreationTime uint64*,
                                lpLastAccessTime uint64*,
                                lpLastWriteTime uint64*) int32;

// ------------------------------------------------
// Win32: libloaderapi.h

native dllimport fn ExitProcess(uExitCode uint32) void;

// ------------------------------------------------
// Win32: handleapi.h

INVALID_HANDLE_VALUE :: cast(void*) -1'i64;

native dllimport fn CloseHandle(hObject void*) int32;

// ------------------------------------------------
// Win32: profileapi.h

native dllimport fn QueryPerformanceFrequency(lpFrequency int64*) bool;
native dllimport fn QueryPerformanceCounter(lpPerformanceCount int64*) bool;

// ------------------------------------------------
// Processthreadsapi.h

// TODO: C-struct alignment?
PROCESS_INFORMATION struct {
    hProcess    void*;
    hThread     void*;
    dwProcessId uint32;
    dwThreadId  uint32;
}

// TODO: C-struct alignment?
STARTUPINFOA struct {
    cb              uint32;
    lpReserved      char*;
    lpDesktop       char*;
    lpTitle         char*;
    dwX             uint32;
    dwY             uint32;
    dwXSize         uint32;
    dwYSize         uint32;
    dwXCountChars   uint32;
    dwYCountChars   uint32;
    dwFillAttribute uint32;
    dwFlags         uint32;
    wShowWindow     uint16;
    cbReserved2     uint16;
    lpReserved2     uint8*;
    hStdInput       void*;
    hStdOutput      void*;
    hStdError       void*;
}

native dllimport fn GetCurrentProcess() void*;

native dllimport fn CreateProcessA(
    lpApplicationName    cstr,
    lpCommandLine        cstr,
    lpProcessAttributes  void*,
    lpThreadAttributes   void*,
    bInheritHandles      int32,
    dwCreationFlags      uint32,
    lpEnvironment        void*,
    lpCurrentDirectory   cstr,
    lpStartupInfo        STARTUPINFOA*,
    lpProcessInformation PROCESS_INFORMATION*
) int32;

native dllimport fn WaitForSingleObject(hHandle void*, dwMilliseconds uint32) uint32;

native dllimport fn GetExitCodeProcess(hProcess void*, lpExitCode uint32*) int32;
