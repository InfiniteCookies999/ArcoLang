namespace win32;

// ------------------------------------------------
// Win32: winnt.h

GENERIC_READ    :: 0x80000000'u32;
GENERIC_WRITE   :: 0x40000000'u32;
GENERIC_EXECUTE :: 0x20000000'u32;
GENERIC_ALL     :: 0x10000000'u32;

FILE_APPEND_DATA :: 0x0004'u32; 

FILE_SHARE_READ                      :: 0x00000001'u32;
FILE_SHARE_WRITE                     :: 0x00000002'u32;
FILE_SHARE_DELETE                    :: 0x00000004'u32;
FILE_ATTRIBUTE_READONLY              :: 0x00000001'u32;
FILE_ATTRIBUTE_HIDDEN                :: 0x00000002'u32;
FILE_ATTRIBUTE_SYSTEM                :: 0x00000004'u32;
FILE_ATTRIBUTE_DIRECTORY             :: 0x00000010'u32;
FILE_ATTRIBUTE_ARCHIVE               :: 0x00000020'u32;
FILE_ATTRIBUTE_DEVICE                :: 0x00000040'u32;
FILE_ATTRIBUTE_NORMAL                :: 0x00000080'u32;
FILE_ATTRIBUTE_TEMPORARY             :: 0x00000100'u32;
FILE_ATTRIBUTE_SPARSE_FILE           :: 0x00000200'u32;
FILE_ATTRIBUTE_REPARSE_POINT         :: 0x00000400'u32;
FILE_ATTRIBUTE_COMPRESSED            :: 0x00000800'u32;
FILE_ATTRIBUTE_OFFLINE               :: 0x00001000'u32;
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED   :: 0x00002000'u32;
FILE_ATTRIBUTE_ENCRYPTED             :: 0x00004000'u32;
FILE_ATTRIBUTE_INTEGRITY_STREAM      :: 0x00008000'u32;
FILE_ATTRIBUTE_VIRTUAL               :: 0x00010000'u32;
FILE_ATTRIBUTE_NO_SCRUB_DATA         :: 0x00020000'u32;
FILE_ATTRIBUTE_EA                    :: 0x00040000'u32;
FILE_ATTRIBUTE_PINNED                :: 0x00080000'u32;
FILE_ATTRIBUTE_UNPINNED              :: 0x00100000'u32;
FILE_ATTRIBUTE_RECALL_ON_OPEN        :: 0x00040000'u32;
FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS :: 0x00400000'u32;

// ------------------------------------------------
// Win32: processenv.h

STD_INPUT_HANDLE  :: -10'u32;
STD_OUTPUT_HANDLE :: -11'u32;
STD_ERROR_HANDLE  :: -12'u32;

native fn GetStdHandle(nStdHandle uint32) void*;

// ------------------------------------------------
// Win32: winbase.h

native fn CreateDirectoryA(lpPathName cstr, lpSecurityAttributes void*) int32;

native fn DeleteFileA(lpFileName cstr) int32;

native fn RemoveDirectoryA(lpPathName cstr) int32;

native fn GetCurrentDirectoryA(nBufferLength uint32, lpBuffer char*) int32;

// ------------------------------------------------
// Win32: fileapi.h

CREATE_NEW        :: 1'u32;
CREATE_ALWAYS     :: 2'u32;
OPEN_EXISTING     :: 3'u32;
OPEN_ALWAYS       :: 4'u32;
TRUNCATE_EXISTING :: 5'u32;

INVALID_FILE_SIZE        :: 0xFFFFFFFF'u32;
INVALID_SET_FILE_POINTER :: -1'u32;
INVALID_FILE_ATTRIBUTES  :: -1'u32;

native fn WriteFile(hFile                  void*,
                    lpBuffer               cstr,
                    nNumberOfBytesToWrite  uint32,
                    lpNumberOfBytesWritten uint32*,
                    lpOverlapped           void* // Ignored data structure.
                    ) int32;

native fn ReadFile(hFile                void*,
                   lpBuffer             void*,
                   nNumberOfBytesToRead uint32,
                   lpNumberOfBytesRead  uint32*,
                   lpOverlapped         void*  // Ignored data structure
                   ) int32;

native fn CreateFileA(lpFileName            cstr,
                      dwDesiredAccess       uint32,
                      dwShareMode           uint32,
                      lpSecurityAttributes  void*, // TODO: Support for security attributes?
                      dwCreationDisposition uint32,
                      dwFlagsAndAttributes  uint32,
                      hTemplateFile         void*
                      ) void*;

native fn GetFileAttributesA(lpFileName cstr) uint32;

native fn GetFileSize(hFile void*, lpFileSizeHigh uint*) uint32;

native fn GetFileTime(hFile void*,
                      lpCreationTime uint64*,
                      lpLastAccessTime uint64*,
                      lpLastWriteTime uint64*) int32;

// ------------------------------------------------
// Win32: libloaderapi.h

native fn ExitProcess(uExitCode uint32) void;

// ------------------------------------------------
// Win32: handleapi.h

INVALID_HANDLE_VALUE :: cast(void*) -1'i64;

native fn CloseHandle(hObject void*) int32;

// ------------------------------------------------
// Win32: profileapi.h

native fn QueryPerformanceFrequency(lpFrequency int64*) bool;
native fn QueryPerformanceCounter(lpPerformanceCount int64*) bool;
