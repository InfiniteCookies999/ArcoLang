namespace win32;

// ------------------------------------------------
// Win32: winnt.h

GENERIC_READ    uint32 = 0x80000000;
GENERIC_WRITE   uint32 = 0x40000000;
GENERIC_EXECUTE uint32 = 0x20000000;
GENERIC_ALL     uint32 = 0x10000000;

FILE_SHARE_READ                      uint32 = 0x00000001;
FILE_SHARE_WRITE                     uint32 = 0x00000002;
FILE_SHARE_DELETE                    uint32 = 0x00000004;
FILE_ATTRIBUTE_READONLY              uint32 = 0x00000001;
FILE_ATTRIBUTE_HIDDEN                uint32 = 0x00000002;
FILE_ATTRIBUTE_SYSTEM                uint32 = 0x00000004;
FILE_ATTRIBUTE_DIRECTORY             uint32 = 0x00000010;
FILE_ATTRIBUTE_ARCHIVE               uint32 = 0x00000020;
FILE_ATTRIBUTE_DEVICE                uint32 = 0x00000040;
FILE_ATTRIBUTE_NORMAL                uint32 = 0x00000080;
FILE_ATTRIBUTE_TEMPORARY             uint32 = 0x00000100;
FILE_ATTRIBUTE_SPARSE_FILE           uint32 = 0x00000200;
FILE_ATTRIBUTE_REPARSE_POINT         uint32 = 0x00000400;
FILE_ATTRIBUTE_COMPRESSED            uint32 = 0x00000800;
FILE_ATTRIBUTE_OFFLINE               uint32 = 0x00001000;
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED   uint32 = 0x00002000;
FILE_ATTRIBUTE_ENCRYPTED             uint32 = 0x00004000;
FILE_ATTRIBUTE_INTEGRITY_STREAM      uint32 = 0x00008000;
FILE_ATTRIBUTE_VIRTUAL               uint32 = 0x00010000;
FILE_ATTRIBUTE_NO_SCRUB_DATA         uint32 = 0x00020000;
FILE_ATTRIBUTE_EA                    uint32 = 0x00040000;
FILE_ATTRIBUTE_PINNED                uint32 = 0x00080000;
FILE_ATTRIBUTE_UNPINNED              uint32 = 0x00100000;
FILE_ATTRIBUTE_RECALL_ON_OPEN        uint32 = 0x00040000;
FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS uint32 = 0x00400000;

// ------------------------------------------------
// Win32: processenv.h

STD_INPUT_HANDLE  uint32 = -10;
STD_OUTPUT_HANDLE uint32 = -11;
STD_ERROR_HANDLE  uint32 = -12;

native fn GetStdHandle(nStdHandle uint32) void*;

// ------------------------------------------------
// Win32: fileapi.h

CREATE_NEW        uint32 = 1;
CREATE_ALWAYS     uint32 = 2;
OPEN_EXISTING     uint32 = 3;
OPEN_ALWAYS       uint32 = 4;
TRUNCATE_EXISTING uint32 = 5;

INVALID_FILE_SIZE        uint32 = 0xFFFFFFFF;
INVALID_SET_FILE_POINTER uint32 = -1;
INVALID_FILE_ATTRIBUTES  uint32 = -1;

native fn WriteFile(hFile                  void*,
                    lpBuffer               cstr,
                    nNumberOfBytesToWrite  uint32,
                    lpNumberOfBytesWritten uint32*,
                    lpOverlapped           void* // Ignored data structure.
                    ) int32;

native fn ReadFile(hFile                void*,
                   lpBuffer             void*,
                   nNumberOfBytesToRead uint32,
                   lpNumberOfBytesRead  uint32*,
                   lpOverlapped         void*  // Ignored data structure
                   ) int32;

native fn CreateFileA(lpFileName            cstr,
                      dwDesiredAccess       uint32,
                      dwShareMode           uint32,
                      lpSecurityAttributes  void*, // TODO: Support for security attributes?
                      dwCreationDisposition uint32,
                      dwFlagsAndAttributes  uint32,
                      hTemplateFile         void*
                      ) void*;

native fn GetFileAttributesA(lpFileName cstr) uint32;

native fn GetFileSize(hFile void*, lpFileSizeHigh uint*) uint32;

// ------------------------------------------------
// Win32: libloaderapi.h

native fn ExitProcess(uExitCode uint32) void;

// ------------------------------------------------
// Win32: handleapi.h

INVALID_HANDLE_VALUE void* = cast(void*) -1'i64;

native fn CloseHandle(hObject void*) int32;