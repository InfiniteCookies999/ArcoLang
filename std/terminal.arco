import win32;
import reflect.Any;
import files.FileHandle;

private out_file_handle := FileHandle{ win32.GetStdHandle(win32.STD_OUTPUT_HANDLE), auto_close=false };
private err_file_handle := FileHandle{ win32.GetStdHandle(win32.STD_ERROR_HANDLE) , auto_close=false };
private in_file_handle  := FileHandle{ win32.GetStdHandle(win32.STD_INPUT_HANDLE) , auto_close=false };
out := OutStream{ &out_file_handle };
err := OutStream{ &err_file_handle };

in  := LineStream{ &in_file_handle };


// TODO: Functions are redundent because there is no support for
//       templating yet!

// Functions for writing to std out.
//----------------------------------------------

fn print(i int64, base := 10) {
    out.write(i, base);
}

fn print(i uint64, base := 10) {
    out.write(i, base);
}

fn print(msg cstr) {
    out.write(msg);
}

fn print(i int, base := 10) {
    out.write(i, base);
}

fn print(i uint, base := 10) {
    out.write(i, base);
}

fn print(b bool) {
    out.write(b);
}

fn print(c char) {
    out.write(c);
}

fn print(any Any) {
    out.write(any);
}

fn print(fmt cstr, args Any...) {
    out.write(fmt, args);
}

fn println(msg cstr) {
    out.writeln(msg);
}

fn println(i int64, base := 10) {
    out.writeln(i, base);
}

fn println(i uint64, base := 10) {
    out.writeln(i, base);
}

fn println(i int, base := 10) {
    out.writeln(i);
}

fn println(i uint, base := 10) {
    out.writeln(i);
}

fn println(b bool) {
    out.writeln(b);
}

fn println(c char) {
    out.writeln(c);
}

fn println() {
    out.writeln();
}

fn println(any Any) {
    out.writeln(any);
}

fn println(fmt cstr, args Any...) {
    out.writeln(fmt, args);
}

// Functions for writing to std err.
//----------------------------------------------

fn eprint(i int64) {
    err.write(i);
}

fn eprint(i uint64) {
    err.write(i);
}

fn eprint(i int) {
    err.write(i);
}

fn eprint(i uint) {
    err.write(i);
}

fn eprint(msg cstr) {
    err.write(msg);
}

fn eprint(b bool) {
    err.write(b);
}

fn eprint(c char) {
    err.write(c);
}

fn eprint(fmt cstr, args Any...) {
    err.write(fmt, args);
}

fn eprintln(msg cstr) {
    err.writeln(msg);
}

fn eprintln(i int) {
    err.writeln(i);
}

fn eprintln(i uint) {
    err.writeln(i);
}

fn eprintln(i int64) {
    err.writeln(i);
}

fn eprintln(i uint64) {
    err.writeln(i);
}

fn eprintln(b bool) {
    err.writeln(b);
}

fn eprintln(c char) {
    err.writeln(c);
}

fn eprintln(fmt cstr, args Any...) {
    err.writeln(fmt, args);
}

fn eprintln() {
    err.writeln();
}

// Reading from terminal
//----------------------------------------------

fn read_line() String {
    return in.read_line();
}

fn read_string() String {
    return in.read_string();
}

fn read_int() int {
    return in.read_int();
}

fn read_int(base int) int {
    return in.read_int32(base);
}

fn read_bool() bool {
    return in.read_bool();
}

fn read_char() char {
    return in.read_char();
}