import win32;
import reflect.Any;
import reflect.TypeId;
import files.FileHandle;

private out_file_handle := FileHandle{ win32.GetStdHandle(win32.STD_OUTPUT_HANDLE), auto_close=false };
private err_file_handle := FileHandle{ win32.GetStdHandle(win32.STD_ERROR_HANDLE) , auto_close=false };
private in_file_handle  := FileHandle{ win32.GetStdHandle(win32.STD_INPUT_HANDLE) , auto_close=false };

out := OutStream{ &out_file_handle };
err := OutStream{ &err_file_handle };

in  := TokenStream{ &in_file_handle };

// Functions for writing to std out.
//----------------------------------------------

fn print(i int64, base := 10) {
    try out.write(i, base);
}

fn print(i uint64, base := 10) {
    try out.write(i, base);
}

fn print(i int, base := 10) {
    try out.write(i, base);
}

fn print(msg cstr) {
    try out.write(msg);
}
fn print(b bool) {
    try out.write(b);
}
fn print(c char) {
    try out.write(c);
}
fn print(f float32) {
    try out.write(f);
}
fn print(f float64) {
    try out.write(f);
}

fn print(any Any) {
    try out.write(any);
}

/*
 * See OutStream for list of formatting
 * options supported when printing. 
 */
fn print(fmt cstr, args Any...) {
    try out.write(fmt, args);
}



fn println(i int64, base := 10) {
    try out.writeln(i, base);
}

fn println(i uint64, base := 10) {
    try out.writeln(i, base);
}

fn println(i int, base := 10) {
    try out.writeln(i, base);
}

fn println(msg cstr) {
    try out.writeln(msg);
}
fn println(b bool) {
    try out.writeln(b);
}
fn println(c char) {
    try out.writeln(c);
}
fn println(f float32) {
    try out.writeln(f);
}
fn println(f float64) {
    try out.writeln(f);
}

fn println(any Any) {
    try out.writeln(any);
}

/*
 * See OutStream for list of formatting
 * options supported when printing. 
 */
fn println(fmt cstr, args Any...) {
    try out.writeln(fmt, args);
}

fn println() {
    try out.writeln();
}

// Functions for writing to std err.
//
// Ignore errors since panicing requires the error
// stream and would result likely result in a
// stack overflow.
//
//----------------------------------------------

fn eprint(i int64, base := 10) {
    err.write(i, base) catch _ {};
}

fn eprint(i uint64, base := 10) {
    err.write(i, base) catch _ {};
}

fn eprint(i int, base := 10) {
    err.write(i, base) catch _ {};
}

fn eprint(msg cstr) {
    err.write(msg) catch _ {};
}
fn eprint(b bool) {
    err.write(b) catch _ {};
}
fn eprint(c char) {
    err.write(c) catch _ {};
}
fn eprint(f float32) {
    err.write(f) catch _ {};
}
fn eprint(f float64) {
    err.write(f) catch _ {};
}

fn eprint(any Any) {
    err.write(any) catch _ {};
}

/*
 * See OutStream for list of formatting
 * options supported when printing. 
 */
fn eprint(fmt cstr, args Any...) {
    err.write(fmt, args) catch _ {};
}



fn eprintln(i int64, base := 10) {
    err.writeln(i, base) catch _ {};
}

fn eprintln(i uint64, base := 10) {
    err.writeln(i, base) catch _ {};
}

fn eprintln(i int, base := 10) {
    err.writeln(i, base) catch _ {};
}

fn eprintln(msg cstr) {
    err.writeln(msg) catch _ {};
}
fn eprintln(b bool) {
    err.writeln(b) catch _ {};
}
fn eprintln(c char) {
    err.writeln(c) catch _ {};
}
fn eprintln(f float32) {
    err.writeln(f) catch _ {};
}
fn eprintln(f float64) {
    err.writeln(f) catch _ {};
}

fn eprintln(any Any) {
    err.writeln(any) catch _ {};
}

/*
 * See OutStream for list of formatting
 * options supported when printing. 
 */
fn eprintln(fmt cstr, args Any...) {
    err.writeln(fmt, args) catch _ {};
}

fn eprintln() {
    err.writeln() catch _ {};
}

// Reading from terminal
//----------------------------------------------

fn read_line() String {
    line := in.read_line() catch _ {
        return String{};
    };
    return line;
}

fn read_string() String {
    s := in.read_string() catch _ {
        return String{};
    };
    return s;
}

fn read_int() int raises ValueParseError {
    v := in.read_int() catch _ {
        return 0;
    };
    return v;
}

// TODO: Why does this take the base but not the other one?
fn read_int(base int) int raises ValueParseError {
    v := in.read_int32(base) catch _ {
        return 0;
    };
    return v;
}

fn read_bool() bool raises ValueParseError {
    v := in.read_bool() catch _ {
        return false;
    };
    return v;
}

fn read_char() char raises ValueParseError {
    v := in.read_char() catch _ {
        return '\0';
    };
    return v;
}