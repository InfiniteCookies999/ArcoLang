import win32;
import reflect.Any;
import files.FileHandle;

private out_file_handle := FileHandle{ win32.GetStdHandle(win32.STD_OUTPUT_HANDLE), auto_close=false };
private err_file_handle := FileHandle{ win32.GetStdHandle(win32.STD_ERROR_HANDLE) , auto_close=false };
private in_file_handle  := FileHandle{ win32.GetStdHandle(win32.STD_INPUT_HANDLE) , auto_close=false };

out := OutStream{ &out_file_handle };
err := OutStream{ &err_file_handle };

in  := TokenStream{ &in_file_handle };

// Functions for writing to std out.
//----------------------------------------------

fn print(i int64, base := 10) {
    try out.write(i, base);
}

fn print(i uint64, base := 10) {
    try out.write(i, base);
}

fn print(i int, base := 10) {
    try out.write(i, base);
}

generics<T>
fn print(value T) {
    try out.write(value);
}

// TODO:   Cannot do this yet until we have generic constraints.
//
//fn print(any Any) {
//    try out.write(any);
//}

/*
 * See OutStream for list of formatting
 * options supported when printing. 
 */
fn print(fmt cstr, args Any...) {
    try out.write(fmt, args);
}

fn println(msg cstr) {
    try out.writeln(msg);
}

fn println(i int64, base := 10) {
    try out.writeln(i, base);
}

fn println(i uint64, base := 10) {
    try out.writeln(i, base);
}

fn println(i int, base := 10) {
    try out.writeln(i);
}

generics<T>
fn println(value T) {
    try out.writeln(value);
}

//  TODO: See comment above!
//
//fn println(any Any) {
//    try out.writeln(any);
//}

/*
 * See OutStream for list of formatting
 * options supported when printing. 
 */
fn println(fmt cstr, args Any...) {
    try out.writeln(fmt, args);
}

// Functions for writing to std err.
//----------------------------------------------

generics<T>
fn eprint(value T) {
    _ := err.write(value);
}

/*
 * See OutStream for list of formatting
 * options supported when printing. 
 */
fn eprint(fmt cstr, args Any...) {
    _ := err.write(fmt, args);
}

generics<T>
fn eprintln(value T) {
    _ := err.writeln(value);
}

/*
 * See OutStream for list of formatting
 * options supported when printing. 
 */
fn eprintln(fmt cstr, args Any...) {
    _ := err.writeln(fmt, args);
}

fn eprintln() {
    _ := err.writeln();
}

// Reading from terminal
//----------------------------------------------

fn read_line() String {
    line, e := in.read_line();
    return line;
}

fn read_string() String {
    s, e := in.read_string();
    return s;
}

fn read_int() int raises ValueParseError {
    v, e := in.read_int();
    if e == ValueParseError {
        raise ValueParseError{ cast(ValueParseError*) e };
    }
    return v;
}

fn read_int(base int) int raises ValueParseError {
    v, e := in.read_int32(base);
    if e == ValueParseError {
        raise ValueParseError{ cast(ValueParseError*) e };
    }
    return v;
}

fn read_bool() bool raises ValueParseError {
    v, e := in.read_bool();
    if e == ValueParseError {
        raise ValueParseError{ cast(ValueParseError*) e };
    }
    return v;
}

fn read_char() char raises ValueParseError {
    v, e := in.read_char();
    if e == ValueParseError {
        raise ValueParseError{ cast(ValueParseError*) e };
    }
    return v;
}