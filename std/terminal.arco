import win32;
import reflect.Any;
import reflect.TypeId;
import files.FileHandle;

private out_file_handle := FileHandle{ win32.GetStdHandle(win32.STD_OUTPUT_HANDLE), auto_close=false };
private err_file_handle := FileHandle{ win32.GetStdHandle(win32.STD_ERROR_HANDLE) , auto_close=false };
private in_file_handle  := FileHandle{ win32.GetStdHandle(win32.STD_INPUT_HANDLE) , auto_close=false };

out := OutStream{ &out_file_handle };
err := OutStream{ &err_file_handle };

in  := TokenStream{ &in_file_handle };

// TODO: since print functions are called so frequently it may
//       be better to at some point not use generics at all.
//
// Used to determine if the value can be printed using
// a generic function or if it would be better to fallback
// on the function which uses an Any type.
generics<T>
private requires_any :: typeid(T) == TypeId.ARRAY ||
                        typeid(T) == TypeId.SLICE ||
                        typeid(T) == TypeId.ENUM  ||
                        typeid(T) == TypeId.STRUCT;

// Functions for writing to std out.
//----------------------------------------------

fn print(i int64, base int) {
    try out.write(i, base);
}

fn print(i uint64, base int) {
    try out.write(i, base);
}

fn print(i int, base int) {
    try out.write(i, base);
}

generics<!requires_any T>
fn print(value T) {
    try out.write(value);
}

fn print(any Any) {
    try out.write(any);
}

/*
 * See OutStream for list of formatting
 * options supported when printing. 
 */
fn print(fmt cstr, args Any...) {
    try out.write(fmt, args);
}

fn println(msg cstr) {
    try out.writeln(msg);
}

fn println(i int64, base int) {
    try out.writeln(i, base);
}

fn println(i uint64, base int) {
    try out.writeln(i, base);
}

fn println(i int, base int) {
    try out.writeln(i);
}

generics<!requires_any T>
fn println(value T) {
    try out.writeln(value);
}

fn println(any Any) {
    try out.writeln(any);
}

/*
 * See OutStream for list of formatting
 * options supported when printing. 
 */
fn println(fmt cstr, args Any...) {
    try out.writeln(fmt, args);
}

// Functions for writing to std err.
//
// Ignore errors since panicing requires the error
// stream and would result likely result in a
// stack overflow.
//
//----------------------------------------------

generics<!requires_any T>
fn eprint(value T) {
    err.write(value) catch _ {};
}

/*
 * See OutStream for list of formatting
 * options supported when printing. 
 */
fn eprint(fmt cstr, args Any...) {
    err.write(fmt, args) catch _ {};
}

generics<!requires_any T>
fn eprintln(value T) {
    err.writeln(value) catch _ {};
}

/*
 * See OutStream for list of formatting
 * options supported when printing. 
 */
fn eprintln(fmt cstr, args Any...) {
    err.writeln(fmt, args) catch _ {};
}

fn eprintln() {
    err.writeln() catch _ {};
}

// Reading from terminal
//----------------------------------------------

fn read_line() String {
    line := in.read_line() catch _ {
        return String{};
    };
    return line;
}

fn read_string() String {
    s := in.read_string() catch _ {
        return String{};
    };
    return s;
}

fn read_int() int raises ValueParseError {
    v := in.read_int() catch _ {
        return 0;
    };
    return v;
}

// TODO: Why does this take the base but not the other one?
fn read_int(base int) int raises ValueParseError {
    v := in.read_int32(base) catch _ {
        return 0;
    };
    return v;
}

fn read_bool() bool raises ValueParseError {
    v := in.read_bool() catch _ {
        return false;
    };
    return v;
}

fn read_char() char raises ValueParseError {
    v := in.read_char() catch _ {
        return '\0';
    };
    return v;
}