import win32;

/**
 * An output stream for writing to files or other writable
 * objects.
 */
OutStream struct {
	
	handle     void*;
	auto_close bool;

	fn ~OutStream() {
		if auto_close {
			close();
		}
	}

	fn OutStream(handle void*, auto_close bool = true) {
		this.handle     = handle;
		this.auto_close = auto_close;
	}

	fn write(msg cstr, length int) {
		bytes_written uint32;
		win32.WriteFile(handle, msg, cast(uint32) length, &bytes_written, null);
	}

	fn write(msg cstr) {
		write(msg, strlen(msg));
	}

	fn write(msg String*) {
		write(msg.buffer, msg.length);
	}

	fn write(b bool) {
		if b {
			write("true");
		} else {
			write("false");
		}
	}

	fn write(c char) {
		write(&c, 1);
	}

	fn write(i int64) {
		if i < 0 {
			i = -i;
			write("-");
		}

		write(cast(uint64) i);
	}

	fn write(i uint64) {
		BUFFER_SIZE :: 21;
		buffer char[BUFFER_SIZE];

		ptr char* = chars_of_uint64(i, buffer + BUFFER_SIZE - 1, 10);

		length := cast(uint)(buffer + BUFFER_SIZE) - cast(uint)ptr;
		write(ptr, length);
	}

	fn write(i int) {
		write(cast(int64) i);
	}

	fn write(i uint) {
		write(cast(uint64) i);
	}

	// ----------------------------------------
	// writeln functions

	fn writeln(msg cstr) {
		write(msg, strlen(msg));
		write("\n", 1);
	}

	fn writeln(msg String*) {
		write(msg);
		write("\n", 1);
	}

	fn writeln(i int) {
		write(cast(int64) i);
		write("\n", 1);
	}

	fn writeln(i uint) {
		write(cast(uint64) i);
		write("\n", 1);
	}

	fn writeln(b bool) {
		write(b);
		write("\n", 1);
	}

	fn writeln(c char) {
		write(c);
		write("\n", 1);
	}

	fn writeln() {
		write("\n", 1);
	}

	fn close() {
		win32.CloseHandle(handle);
	}
}