
out OutStream = OutStream{ win32.GetStdHandle(-11) };
err OutStream = OutStream{ win32.GetStdHandle(-12) };

// TODO: Functions are redundent because there is no support for
//       templating yet!

// Functions for writing to std out.
//----------------------------------------------

fn print(i int64) {
	out.write(i);
}

fn print(i uint64) {
	out.write(i);
}

fn print(msg cstr) {
	out.write(msg);
}

// TODO: Should be pass by const ref once supported.
fn print(msg String) {
	out.write(msg);
}

fn println(msg cstr) {
	out.writeln(msg);
}

fn println(i int) {
	out.writeln(i);
}

fn println(i uint) {
	out.writeln(i);
}

// TODO: Should be pass by const ref once supported.
fn println(msg String) {
	out.writeln(msg);
}

// Functions for writing to std out.
//----------------------------------------------

fn eprint(i int64) {
	err.write(i);
}

fn eprint(i uint64) {
	err.write(i);
}

fn eprint(msg cstr) {
	err.write(msg);
}

// TODO: Should be pass by const ref once supported.
fn eprint(msg String) {
	err.write(msg);
}

fn eprintln(msg cstr) {
	err.writeln(msg);
}

fn eprintln(i int) {
	err.writeln(i);
}

fn eprintln(i uint) {
	err.writeln(i);
}

// TODO: Should be pass by const ref once supported.
fn eprintln(msg String) {
	err.writeln(msg);
}

// Reading from terminal
//----------------------------------------------

fn read(buffer char*, length int) int {
	handle               void* = win32.GetStdHandle(-10);
	number_of_bytes_read uint32;
	win32.ReadFile(handle, buffer, cast(uint32) length, &number_of_bytes_read, null);
	return cast(int) number_of_bytes_read;
}

fn read_line() String {
	buffer char[1024];
	amount_read int = read(buffer, buffer.length);
	// -2 because of \r\n is read when calling Windows ReadFile.
	return String{ buffer, amount_read - 2 };
}