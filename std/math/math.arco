namespace math;

/*
 * The ratio between the circumference and diamter of a circle.
 */
PI :: 3.14159265358979323846;

/*
 * The ratio between the circumference and radius of a circle.
 * 
 * TAU = 2*PI
 */
TAU :: 6.28318530717958647692;

/*
 * The base of the natural logorithm.
 */
E   :: 2.7182818284590452354;

/*
 * Constant which when multiplied by converts a degree value
 * to a radian value.
 *
 * Or use: math.to_radians() function.
 */
DEGREES_TO_RADIAS  :: 0.017453292519943295;

/*
 * Constant which when multiplied by converts a radian value
 * to a degree value.
 *
 * Or use: math.to_degrees() function.
 */
RADIANS_TO_DEGREES :: 57.29577951308232;

/*
 * Converts the angle in degrees to radians.
 */
fn to_radians(angle float64) float64 {
    return angle * DEGREES_TO_RADIAS;
}

/*
 * Converts the angle in degrees to radians.
 */
fn to_radians(angle float32) float32 {
    return cast(float32) (angle * DEGREES_TO_RADIAS);
}

/*
 * Converts the angle in radians to degrees.
 */
fn to_degrees(angle float64) float64 {
    return angle * RADIANS_TO_DEGREES;
}

/*
 * Converts the angle in radians to degrees.
 */
fn to_degrees(angle float32) float32 {
    return cast(float32) (angle * RADIANS_TO_DEGREES);
}

/*
 * Calculates the smallest mathematical integer
 * not less than x.
 *
 * Example: floor(4.3) == 4.0
 */
native fn floor(x float64) float64;

/*
 * Calculates the smallest mathematical integer
 * not less than x.
 *
 * Example: floor(4.3) == 4.0
 */
native fn floor(x float32) float32;

/*
 * Calculates the largest mathematical integer
 * not greater than x.
 *
 * Example: floor(4.3) == 5.0
 */
native fn ceil(x float64) float64;

/*
 * Calculates the largest mathematical integer
 * not greater than x.
 *
 * Example: floor(4.3) == 5.0
 */
native fn ceil(x float32) float32;

/*
 * Calculates x raised to the power of exp.
 */
native fn pow(x float64, exp float64) float64;

/*
 * Calculates x raised to the power of exp.
 */
native fn pow(x float32, exp float32) float32;

/*
 * Calculates the natural logorithm of x.
 *
 * The natural logorithm is a logorithm with
 * base e, Euler's number. This function is
 * often denoted as just "log(x)" in maths.
 */
native("log") fn ln(x float64) float64;

/*
 * Calculates the natural logorithm of x.
 *
 * The natural logorithm is a logorithm with
 * base e, Euler's number. This function is
 * often denoted as just "log(x)" in maths.
 */
native("log") fn ln(x float32) float32;

/*
 * Calculates the natural logorithm of x
 * with a base of 10.
 */
native fn log10(x float64) float64;

/*
 * Calculates the natural logorithm of x
 * with a base of 10.
 */
native fn log10(x float32) float32;

/*
 * Returns the positive sqrt of x.
 *
 * If x is less than 0 then nan is returned.
 */
native fn sqrt(x float64) float64;

/*
 * Returns the positive sqrt of x.
 *
 * If x is less than 0 then nan is returned.
 */
native fn sqrt(x float32) float32;

/*
 * Returns the trigonometric sine of angle x.
 *
 * @param x an angle in radians.
 */
native fn sin(x float64) float64;

/*
 * Returns the trigonometric sine of angle x.
 *
 * @param x an angle in radians.
 */
native fn sin(x float32) float32;

/*
 * Returns the trigonometric cosine of angle x.
 *
 * @param x an angle in radians.
 */
native fn cos(x float64) float64;

/*
 * Returns the trigonometric cosine of angle x.
 *
 * @param x an angle in radians.
 */
native fn cos(x float32) float32;

/*
 * Returns the trigonometric tangent of angle x.
 *
 * @param x an angle in radians.
 */
fn tan(x float64) float64 {
    return sin(x) / cos(x);
}

/*
 * Returns the trigonometric tangent of angle x.
 *
 * @param x an angle in radians.
 */
fn tan(x float32) float32 {
    return sin(x) / cos(x);
}

generics<T>
fn min(a T, b T) T {
    return a < b ? a : b;
}

generics<T>
fn max(a T, b T) T {
    return a > b ? a : b;
}

// ---------------------------------------------
// Numeric limits

MIN_INT8   :: -128;
MAX_INT8   :: +127;
MIN_UINT8  :: 0;
MAX_UINT8  :: 255;

MIN_INT16  :: -32768;
MAX_INT16  :: +32767;
MIN_UINT16 :: 0;
MAX_UINT16 :: 65535;

MIN_INT32  :: -2147483648;
MAX_INT32  :: +2147483647;
MIN_UINT32 :: 0;
MAX_UINT32 :: 4294967295;

MIN_INT64  :: -9223372036854775808;
MAX_INT64  :: +9223372036854775807;
MIN_UINT64 :: 0;
MAX_UINT64 :: 18446744073709551615;

/*
 * Constant 64 bit floating value which represents
 * positive infinity.
 */
FLOAT64_POSITIVE_INF :: bitcast(float64) (0b11111111111'u64 << 52);

/*
 * Constant 64 bit floating value which represents
 * negative infinity.
 */
FLOAT64_NEGATIVE_INF :: bitcast(float64) ((0b11111111111'u64 << 52) | (1'u64 << 63));

/*
 * Constant 64 bit floating value which represnts
 * "not a number".
 */
FLOAT64_NAN :: FLOAT64_POSITIVE_INF * 0.0;

/*
 * Constant 32 bit floating value which represents
 * positive infinity.
 */
FLOAT32_POSITIVE_INF :: bitcast(float32) (0b11111111'u32 << 23);

/*
 * Constant 32 bit floating value which represents
 * negative infinity.
 */
FLOAT32_NEGATIVE_INF :: bitcast(float32) ((0b11111111'u32 << 23) | (1'u32 << 31));

/*
 * Constant 32 bit floating value which represnts
 * "not a number".
 */
FLOAT32_NAN :: FLOAT64_POSITIVE_INF * 0.0f;
