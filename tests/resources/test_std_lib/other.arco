String struct {

}

native fn GetStdHandle(nStdHandle uint32) void*;

native fn WriteFile(hFile                  void*,
                    lpBuffer               cstr,
                    nNumberOfBytesToWrite  uint32,
                    lpNumberOfBytesWritten uint32*,
                    lpOverlapped           void* // Ignored data structure.
                    ) int32;
                    
fn print(msg cstr, length int) {
    handle        void* = GetStdHandle(cast(uint32) -11);
    bytes_written uint32;
    WriteFile(handle, msg, cast(uint32) length, &bytes_written, null);
}

fn print(msg cstr) {
    print(msg, strlen(msg));
}

fn strlen(s cstr) int {
    return cast(int) _strlen(s);
}
native("strlen") fn(cdecl) _strlen(s cstr) ptrsize;

fn print(i int) {
    if i == 0 {
        msg cstr = "0";
        print(msg, 1);
        return;
    }
    
    length int = 0;
    buffer char[20];
    
    i = -i;
    
    v int = i;
    loop v < 0 {
        v = v / 10;
        length = length + 1;
    }
    
    scan int = length - 1;
    loop i < 0 {
        val int = -(i % 10) + 48;
        buffer[scan] = cast(char) val;
        scan = scan - 1;
        i = i / 10;
    }
    
    print(buffer, length);
}
